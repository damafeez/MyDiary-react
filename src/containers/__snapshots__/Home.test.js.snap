// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should call getEntries on mount 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Home
    confirmAction={[MockFunction]}
    currentIndex={0}
    deleteEntryAction={[MockFunction]}
    entries={
      Array [
        Object {
          "body": "this body",
          "id": 1,
          "title": "this title",
        },
      ]
    }
    getEntries={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    handleClick={[MockFunction]}
    scroll={[MockFunction]}
    updateMode={false}
    user={
      Object {
        "email": "test@gmail.c",
        "fullName": "Afeez Awoyemi",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <div
          className="home"
        >
          <Connect(Scroller)>
            <Connect(AddEntry)
              entry={
                Object {
                  "body": "this body",
                  "id": 1,
                  "title": "this title",
                }
              }
              updateMode={false}
            />
            <Unknown
              currentIndex={0}
              entries={
                Array [
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  },
                ]
              }
              scroll={[MockFunction]}
            />
            <Unknown
              currentIndex={0}
              entries={
                Array [
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  },
                ]
              }
            />
          </Connect(Scroller)>
        </div>,
        <Unknown
          entryIsSelected={true}
          handleAdd={[Function]}
          handleDelete={[Function]}
          handleUpdate={[Function]}
          scroll={[MockFunction]}
          updateMode={false}
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Connect(Scroller)>
            <Connect(AddEntry)
              entry={
                Object {
                  "body": "this body",
                  "id": 1,
                  "title": "this title",
                }
              }
              updateMode={false}
            />
            <Unknown
              currentIndex={0}
              entries={
                Array [
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  },
                ]
              }
              scroll={[MockFunction]}
            />
            <Unknown
              currentIndex={0}
              entries={
                Array [
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  },
                ]
              }
            />
          </Connect(Scroller)>,
          "className": "home",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Connect(AddEntry)
                entry={
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  }
                }
                updateMode={false}
              />,
              <Unknown
                currentIndex={0}
                entries={
                  Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ]
                }
                scroll={[MockFunction]}
              />,
              <Unknown
                currentIndex={0}
                entries={
                  Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ]
                }
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "entry": Object {
                  "body": "this body",
                  "id": 1,
                  "title": "this title",
                },
                "updateMode": false,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "currentIndex": 0,
                "entries": Array [
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  },
                ],
                "handleClick": undefined,
                "scroll": [MockFunction],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "currentIndex": 0,
                "entries": Array [
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  },
                ],
                "error": undefined,
                "loading": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "entryIsSelected": true,
          "handleAdd": [Function],
          "handleDelete": [Function],
          "handleUpdate": [Function],
          "history": undefined,
          "scroll": [MockFunction],
          "showAdd": undefined,
          "updateMode": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <div
            className="home"
          >
            <Connect(Scroller)>
              <Connect(AddEntry)
                entry={
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  }
                }
                updateMode={false}
              />
              <Unknown
                currentIndex={0}
                entries={
                  Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ]
                }
                scroll={[MockFunction]}
              />
              <Unknown
                currentIndex={0}
                entries={
                  Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ]
                }
              />
            </Connect(Scroller)>
          </div>,
          <Unknown
            entryIsSelected={true}
            handleAdd={[Function]}
            handleDelete={[Function]}
            handleUpdate={[Function]}
            scroll={[MockFunction]}
            updateMode={false}
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Connect(Scroller)>
              <Connect(AddEntry)
                entry={
                  Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  }
                }
                updateMode={false}
              />
              <Unknown
                currentIndex={0}
                entries={
                  Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ]
                }
                scroll={[MockFunction]}
              />
              <Unknown
                currentIndex={0}
                entries={
                  Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ]
                }
              />
            </Connect(Scroller)>,
            "className": "home",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Connect(AddEntry)
                  entry={
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    }
                  }
                  updateMode={false}
                />,
                <Unknown
                  currentIndex={0}
                  entries={
                    Array [
                      Object {
                        "body": "this body",
                        "id": 1,
                        "title": "this title",
                      },
                    ]
                  }
                  scroll={[MockFunction]}
                />,
                <Unknown
                  currentIndex={0}
                  entries={
                    Array [
                      Object {
                        "body": "this body",
                        "id": 1,
                        "title": "this title",
                      },
                    ]
                  }
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "entry": Object {
                    "body": "this body",
                    "id": 1,
                    "title": "this title",
                  },
                  "updateMode": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "currentIndex": 0,
                  "entries": Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ],
                  "handleClick": undefined,
                  "scroll": [MockFunction],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "currentIndex": 0,
                  "entries": Array [
                    Object {
                      "body": "this body",
                      "id": 1,
                      "title": "this title",
                    },
                  ],
                  "error": undefined,
                  "loading": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "entryIsSelected": true,
            "handleAdd": [Function],
            "handleDelete": [Function],
            "handleUpdate": [Function],
            "history": undefined,
            "scroll": [MockFunction],
            "showAdd": undefined,
            "updateMode": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
