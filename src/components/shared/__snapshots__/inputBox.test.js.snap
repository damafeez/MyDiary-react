// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    value="name"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <svg
          className="icon"
        >
          <use
            xlinkHref="[object Object]#undefined"
          />
        </svg>,
        <input
          className="active"
          type="text"
          value="name"
        />,
        <label />,
      ],
      "className": "input-box ",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <use
            xlinkHref="[object Object]#undefined"
          />,
          "className": "icon",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "xlinkHref": "[object Object]#undefined",
          },
          "ref": null,
          "rendered": null,
          "type": "use",
        },
        "type": "svg",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "active",
          "id": undefined,
          "name": undefined,
          "onChange": undefined,
          "required": undefined,
          "type": "text",
          "value": "name",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "htmlFor": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <svg
            className="icon"
          >
            <use
              xlinkHref="[object Object]#undefined"
            />
          </svg>,
          <input
            className="active"
            type="text"
            value="name"
          />,
          <label />,
        ],
        "className": "input-box ",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <use
              xlinkHref="[object Object]#undefined"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "xlinkHref": "[object Object]#undefined",
            },
            "ref": null,
            "rendered": null,
            "type": "use",
          },
          "type": "svg",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "active",
            "id": undefined,
            "name": undefined,
            "onChange": undefined,
            "required": undefined,
            "type": "text",
            "value": "name",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "htmlFor": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`matches snapshot:::textarea 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    type="textarea"
    value="name"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <svg
          className="icon"
        >
          <use
            xlinkHref="[object Object]#undefined"
          />
        </svg>,
        <textarea
          className="active"
          rows="4"
          type="textarea"
          value="name"
        />,
        <label />,
      ],
      "className": "input-box textarea",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <use
            xlinkHref="[object Object]#undefined"
          />,
          "className": "icon",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "xlinkHref": "[object Object]#undefined",
          },
          "ref": null,
          "rendered": null,
          "type": "use",
        },
        "type": "svg",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "active",
          "id": undefined,
          "name": undefined,
          "onChange": undefined,
          "required": undefined,
          "rows": "4",
          "type": "textarea",
          "value": "name",
        },
        "ref": null,
        "rendered": null,
        "type": "textarea",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "htmlFor": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <svg
            className="icon"
          >
            <use
              xlinkHref="[object Object]#undefined"
            />
          </svg>,
          <textarea
            className="active"
            rows="4"
            type="textarea"
            value="name"
          />,
          <label />,
        ],
        "className": "input-box textarea",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <use
              xlinkHref="[object Object]#undefined"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "xlinkHref": "[object Object]#undefined",
            },
            "ref": null,
            "rendered": null,
            "type": "use",
          },
          "type": "svg",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "active",
            "id": undefined,
            "name": undefined,
            "onChange": undefined,
            "required": undefined,
            "rows": "4",
            "type": "textarea",
            "value": "name",
          },
          "ref": null,
          "rendered": null,
          "type": "textarea",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "htmlFor": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`matches snapshot:::value: 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown
    value=""
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <svg
          className="icon"
        >
          <use
            xlinkHref="[object Object]#undefined"
          />
        </svg>,
        <input
          className=""
          type="text"
          value=""
        />,
        <label />,
      ],
      "className": "input-box ",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <use
            xlinkHref="[object Object]#undefined"
          />,
          "className": "icon",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "xlinkHref": "[object Object]#undefined",
          },
          "ref": null,
          "rendered": null,
          "type": "use",
        },
        "type": "svg",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "",
          "id": undefined,
          "name": undefined,
          "onChange": undefined,
          "required": undefined,
          "type": "text",
          "value": "",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "htmlFor": undefined,
        },
        "ref": null,
        "rendered": null,
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <svg
            className="icon"
          >
            <use
              xlinkHref="[object Object]#undefined"
            />
          </svg>,
          <input
            className=""
            type="text"
            value=""
          />,
          <label />,
        ],
        "className": "input-box ",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <use
              xlinkHref="[object Object]#undefined"
            />,
            "className": "icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "xlinkHref": "[object Object]#undefined",
            },
            "ref": null,
            "rendered": null,
            "type": "use",
          },
          "type": "svg",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "",
            "id": undefined,
            "name": undefined,
            "onChange": undefined,
            "required": undefined,
            "type": "text",
            "value": "",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "htmlFor": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
